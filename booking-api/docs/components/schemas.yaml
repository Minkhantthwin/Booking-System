components:
  schemas:
    UserPublic:
      type: object
      properties:
        user_id:
          type: integer
        role_id:
          type: integer
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        name:
          type: string
        status:
          type: string
          enum: [active, inactive]
        created_at:
          type: string
          format: date-time
    RegisterRequest:
      type: object
      required: [role_id, email, password, name]
      properties:
        role_id:
          type: integer
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        name:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserUpdateRequest:
      type: object
      properties:
        email: { type: string, format: email }
        phone: { type: string }
        name: { type: string }
        password: { type: string }
        role_id: { type: integer, description: Admin only }
        status:
          type: string
          enum: [active, inactive]
    UsersList:
      type: object
      properties:
        user:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Number of items per page
            total:
              type: integer
              description: Total number of users
            totalPages:
              type: integer
              description: Total number of pages
    Role:
      type: object
      properties:
        role_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
    RoleCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
    RoleUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    Service:
      type: object
      properties:
        service_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          minimum: 0
        duration_min:
          type: integer
          minimum: 1
        created_at:
          type: string
          format: date-time

    ServiceCreateRequest:
      type: object
      required: [name, price, duration_min]
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          minimum: 0
        duration_min:
          type: integer
          minimum: 1
    ServiceUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          minimum: 0
        duration_min:
          type: integer
          minimum: 1

    # Resource schemas
    Resource:
      type: object
      properties:
        resource_id:
          type: integer
        name:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [available, unavailable]
          default: available
    ResourceCreateRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
    ResourceUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [available, unavailable]

    # Availability schemas
    Availability:
      type: object
      properties:
        availability_id: { type: integer }
        user_id: { type: integer, nullable: true }
        resource_id: { type: integer, nullable: true }
        day_of_week:
          type: string
          enum: [Mon, Tue, Wed, Thu, Fri, Sat, Sun]
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
    AvailabilityCreateRequest:
      type: object
      required: [day_of_week, start_datetime, end_datetime]
      properties:
        user_id: { type: integer, nullable: true }
        resource_id: { type: integer, nullable: true }
        day_of_week:
          type: string
          enum: [Mon, Tue, Wed, Thu, Fri, Sat, Sun]
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
    AvailabilityUpdateRequest:
      type: object
      properties:
        user_id: { type: integer, nullable: true }
        resource_id: { type: integer, nullable: true }
        day_of_week:
          type: string
          enum: [Mon, Tue, Wed, Thu, Fri, Sat, Sun]
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }

    BlockedSlot:
      type: object
      properties:
        blocked_id: { type: integer }
        user_id: { type: integer }
        resource_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
    BlockedSlotCreateRequest:
      type: object
      required: [user_id, resource_id, start_datetime, end_datetime]
      properties:
        user_id: { type: integer }
        resource_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
    BlockedSlotUpdateRequest:
      type: object
      properties:
        user_id: { type: integer }
        resource_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }

    Booking:
      type: object
      properties:
        booking_id: { type: integer }
        customer_id: { type: integer }
        staff_id: { type: integer }
        resource_id: { type: integer }
        service_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
        notes: { type: string, nullable: true }
        status:
          type: string
          enum: [active, inactive]
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    BookingCreateRequest:
      type: object
      required: [customer_id, staff_id, resource_id, service_id, start_datetime, end_datetime]
      properties:
        customer_id: { type: integer }
        staff_id: { type: integer }
        resource_id: { type: integer }
        service_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
        notes: { type: string }
    BookingUpdateRequest:
      type: object
      properties:
        customer_id: { type: integer }
        staff_id: { type: integer }
        resource_id: { type: integer }
        service_id: { type: integer }
        start_datetime: { type: string, format: date-time }
        end_datetime: { type: string, format: date-time }
        notes: { type: string }
        status:
          type: string
          enum: [active, inactive]
          
    AuditLog:
      type: object
      properties:
        log_id: { type: integer }
        user_id: { type: integer, nullable: true }
        action: { type: string }
        entity: { type: string, nullable: true }
        entity_id: { type: integer, nullable: true }
        details: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
    AuditLogCreateRequest:
      type: object
      required: [action]
      properties:
        user_id: { type: integer }
        action: { type: string }
        entity: { type: string }
        entity_id: { type: integer }
        details: { type: string }
    AuditLogUpdateRequest:
      type: object
      properties:
        user_id: { type: integer }
        action: { type: string }
        entity: { type: string }
        entity_id: { type: integer }
        details: { type: string }
    AuditLogList:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        pagination:
          type: object
          properties:
            page: { type: integer }
            limit: { type: integer }
            total: { type: integer }
            totalPages: { type: integer }
    AuditLogStats:
      type: object
      properties:
        stats:
          type: array
          items:
            type: object
            properties:
              action: { type: string }
              count: { type: integer }

    Payment:
      type: object
      properties:
        payment_id: { type: integer }
        booking_id: { type: integer }
        amount: { type: number }
        method:
          type: string
          enum: [credit_card, paypal, cash, bank_transfer]
        status:
          type: string
          enum: [pending, paid, failed, refunded]
        transaction_ref: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
    PaymentCreateRequest:
      type: object
      required: [booking_id, amount, method]
      properties:
        booking_id: { type: integer }
        amount: { type: number, minimum: 0 }
        method:
          type: string
          enum: [credit_card, paypal, cash, bank_transfer]
        status:
          type: string
          enum: [pending, paid, failed, refunded]
        transaction_ref: { type: string }
    PaymentUpdateRequest:
      type: object
      properties:
        booking_id: { type: integer }
        amount: { type: number, minimum: 0 }
        method:
          type: string
          enum: [credit_card, paypal, cash, bank_transfer]
        status:
          type: string
          enum: [pending, paid, failed, refunded]
        transaction_ref: { type: string, nullable: true }
    PaymentList:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        pagination:
          type: object
          properties:
            page: { type: integer }
            limit: { type: integer }
            total: { type: integer }
            totalPages: { type: integer }
    PaymentStats:
      type: object
      properties:
        stats:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                enum: [pending, paid, failed, refunded]
              count: { type: integer }
              totalAmount: { type: number }